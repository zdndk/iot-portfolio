/*
 * generated by Xtext 2.16.0
 */
package org.xtext.sdu.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.sdu.ide.contentassist.antlr.internal.InternalIoTParser;
import org.xtext.sdu.services.IoTGrammarAccess;

public class IoTParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(IoTGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, IoTGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSystemAccess().getSystemAlternatives_0(), "rule__System__SystemAlternatives_0");
			builder.put(grammarAccess.getDeviceAccess().getAlternatives_6(), "rule__Device__Alternatives_6");
			builder.put(grammarAccess.getFetchDataAccess().getAlternatives_3(), "rule__FetchData__Alternatives_3");
			builder.put(grammarAccess.getFetchDataAccess().getAlternatives_8(), "rule__FetchData__Alternatives_8");
			builder.put(grammarAccess.getFetchDataAccess().getAlternatives_9(), "rule__FetchData__Alternatives_9");
			builder.put(grammarAccess.getFetchDataConditionAccess().getAlternatives_0(), "rule__FetchDataCondition__Alternatives_0");
			builder.put(grammarAccess.getTimeUnitAccess().getAlternatives(), "rule__TimeUnit__Alternatives");
			builder.put(grammarAccess.getSensorTypesAccess().getGroup(), "rule__SensorTypes__Group__0");
			builder.put(grammarAccess.getSensorTypesAccess().getGroup_2(), "rule__SensorTypes__Group_2__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getSensorGroupAccess().getGroup(), "rule__SensorGroup__Group__0");
			builder.put(grammarAccess.getSensorGroupAccess().getGroup_4(), "rule__SensorGroup__Group_4__0");
			builder.put(grammarAccess.getSensorGetMethodAccess().getGroup(), "rule__SensorGetMethod__Group__0");
			builder.put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_2(), "rule__Method__Group_2__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_2_1(), "rule__Method__Group_2_1__0");
			builder.put(grammarAccess.getDeviceTypesAccess().getGroup(), "rule__DeviceTypes__Group__0");
			builder.put(grammarAccess.getDeviceTypesAccess().getGroup_2(), "rule__DeviceTypes__Group_2__0");
			builder.put(grammarAccess.getDeviceAccess().getGroup(), "rule__Device__Group__0");
			builder.put(grammarAccess.getDeviceAccess().getGroup_6_0(), "rule__Device__Group_6_0__0");
			builder.put(grammarAccess.getDeviceAccess().getGroup_6_1(), "rule__Device__Group_6_1__0");
			builder.put(grammarAccess.getServerTypesAccess().getGroup(), "rule__ServerTypes__Group__0");
			builder.put(grammarAccess.getServerTypesAccess().getGroup_2(), "rule__ServerTypes__Group_2__0");
			builder.put(grammarAccess.getServerAccess().getGroup(), "rule__Server__Group__0");
			builder.put(grammarAccess.getDestinationTypesAccess().getGroup(), "rule__DestinationTypes__Group__0");
			builder.put(grammarAccess.getDestinationTypesAccess().getGroup_2(), "rule__DestinationTypes__Group_2__0");
			builder.put(grammarAccess.getDestinationAccess().getGroup(), "rule__Destination__Group__0");
			builder.put(grammarAccess.getFetchDataAccess().getGroup(), "rule__FetchData__Group__0");
			builder.put(grammarAccess.getFetchDataAccess().getGroup_3_0(), "rule__FetchData__Group_3_0__0");
			builder.put(grammarAccess.getFetchDataAccess().getGroup_3_1(), "rule__FetchData__Group_3_1__0");
			builder.put(grammarAccess.getFetchDataAccess().getGroup_8_0(), "rule__FetchData__Group_8_0__0");
			builder.put(grammarAccess.getFetchDataAccess().getGroup_8_1(), "rule__FetchData__Group_8_1__0");
			builder.put(grammarAccess.getFetchDataExpressionAccess().getGroup(), "rule__FetchDataExpression__Group__0");
			builder.put(grammarAccess.getFetchDataConditionAccess().getGroup(), "rule__FetchDataCondition__Group__0");
			builder.put(grammarAccess.getIpAccess().getGroup(), "rule__Ip__Group__0");
			builder.put(grammarAccess.getPortnumberAccess().getGroup(), "rule__Portnumber__Group__0");
			builder.put(grammarAccess.getSystemAccess().getSystemAssignment(), "rule__System__SystemAssignment");
			builder.put(grammarAccess.getSensorTypeAccess().getNameAssignment(), "rule__SensorType__NameAssignment");
			builder.put(grammarAccess.getSensorTypesAccess().getTypesAssignment_1(), "rule__SensorTypes__TypesAssignment_1");
			builder.put(grammarAccess.getSensorTypesAccess().getTypesAssignment_2_1(), "rule__SensorTypes__TypesAssignment_2_1");
			builder.put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getTypeAssignment_4(), "rule__Sensor__TypeAssignment_4");
			builder.put(grammarAccess.getSensorGroupAccess().getNameAssignment_1(), "rule__SensorGroup__NameAssignment_1");
			builder.put(grammarAccess.getSensorGroupAccess().getSensorsAssignment_3(), "rule__SensorGroup__SensorsAssignment_3");
			builder.put(grammarAccess.getSensorGroupAccess().getSensorsAssignment_4_1(), "rule__SensorGroup__SensorsAssignment_4_1");
			builder.put(grammarAccess.getSensorGetMethodAccess().getMethodAssignment_1(), "rule__SensorGetMethod__MethodAssignment_1");
			builder.put(grammarAccess.getSensorGetMethodAccess().getTypeAssignment_4(), "rule__SensorGetMethod__TypeAssignment_4");
			builder.put(grammarAccess.getMethodAccess().getNameAssignment_0(), "rule__Method__NameAssignment_0");
			builder.put(grammarAccess.getMethodAccess().getParametersAssignment_2_0(), "rule__Method__ParametersAssignment_2_0");
			builder.put(grammarAccess.getMethodAccess().getParametersAssignment_2_1_1(), "rule__Method__ParametersAssignment_2_1_1");
			builder.put(grammarAccess.getDeviceTypeAccess().getNameAssignment(), "rule__DeviceType__NameAssignment");
			builder.put(grammarAccess.getDeviceTypesAccess().getTypesAssignment_1(), "rule__DeviceTypes__TypesAssignment_1");
			builder.put(grammarAccess.getDeviceTypesAccess().getTypesAssignment_2_1(), "rule__DeviceTypes__TypesAssignment_2_1");
			builder.put(grammarAccess.getDeviceAccess().getNameAssignment_1(), "rule__Device__NameAssignment_1");
			builder.put(grammarAccess.getDeviceAccess().getTypeAssignment_4(), "rule__Device__TypeAssignment_4");
			builder.put(grammarAccess.getDeviceAccess().getDevicesAssignment_6_0_1(), "rule__Device__DevicesAssignment_6_0_1");
			builder.put(grammarAccess.getDeviceAccess().getDevicesAssignment_6_1_1(), "rule__Device__DevicesAssignment_6_1_1");
			builder.put(grammarAccess.getServerTypeAccess().getNameAssignment(), "rule__ServerType__NameAssignment");
			builder.put(grammarAccess.getServerTypesAccess().getTypesAssignment_1(), "rule__ServerTypes__TypesAssignment_1");
			builder.put(grammarAccess.getServerTypesAccess().getTypesAssignment_2_1(), "rule__ServerTypes__TypesAssignment_2_1");
			builder.put(grammarAccess.getServerAccess().getNameAssignment_1(), "rule__Server__NameAssignment_1");
			builder.put(grammarAccess.getServerAccess().getTypeAssignment_4(), "rule__Server__TypeAssignment_4");
			builder.put(grammarAccess.getServerAccess().getIpAssignment_7(), "rule__Server__IpAssignment_7");
			builder.put(grammarAccess.getServerAccess().getPortAssignment_9(), "rule__Server__PortAssignment_9");
			builder.put(grammarAccess.getDestinationTypeAccess().getNameAssignment(), "rule__DestinationType__NameAssignment");
			builder.put(grammarAccess.getDestinationTypesAccess().getTypesAssignment_1(), "rule__DestinationTypes__TypesAssignment_1");
			builder.put(grammarAccess.getDestinationTypesAccess().getTypesAssignment_2_1(), "rule__DestinationTypes__TypesAssignment_2_1");
			builder.put(grammarAccess.getDestinationAccess().getNameAssignment_1(), "rule__Destination__NameAssignment_1");
			builder.put(grammarAccess.getDestinationAccess().getTypeAssignment_3(), "rule__Destination__TypeAssignment_3");
			builder.put(grammarAccess.getFetchDataAccess().getFilterAssignment_3_0_1(), "rule__FetchData__FilterAssignment_3_0_1");
			builder.put(grammarAccess.getFetchDataAccess().getFilterAssignment_3_1_1(), "rule__FetchData__FilterAssignment_3_1_1");
			builder.put(grammarAccess.getFetchDataAccess().getDeviceAssignment_6(), "rule__FetchData__DeviceAssignment_6");
			builder.put(grammarAccess.getFetchDataAccess().getDestinationAssignment_8_0_1(), "rule__FetchData__DestinationAssignment_8_0_1");
			builder.put(grammarAccess.getFetchDataAccess().getDestinationAssignment_8_1_1(), "rule__FetchData__DestinationAssignment_8_1_1");
			builder.put(grammarAccess.getFetchDataAccess().getConExpAssignment_9_0(), "rule__FetchData__ConExpAssignment_9_0");
			builder.put(grammarAccess.getFetchDataAccess().getConExpAssignment_9_1(), "rule__FetchData__ConExpAssignment_9_1");
			builder.put(grammarAccess.getFetchDataExpressionAccess().getDurationAssignment_1(), "rule__FetchDataExpression__DurationAssignment_1");
			builder.put(grammarAccess.getFetchDataExpressionAccess().getTimeUnitAssignment_2(), "rule__FetchDataExpression__TimeUnitAssignment_2");
			builder.put(grammarAccess.getFetchDataConditionAccess().getConditionAssignment_1(), "rule__FetchDataCondition__ConditionAssignment_1");
			builder.put(grammarAccess.getIpAccess().getIpAssignment_1(), "rule__Ip__IpAssignment_1");
			builder.put(grammarAccess.getIpAccess().getIpAssignment_3(), "rule__Ip__IpAssignment_3");
			builder.put(grammarAccess.getIpAccess().getIpAssignment_5(), "rule__Ip__IpAssignment_5");
			builder.put(grammarAccess.getIpAccess().getIpAssignment_7(), "rule__Ip__IpAssignment_7");
			builder.put(grammarAccess.getPortnumberAccess().getNumberAssignment_1(), "rule__Portnumber__NumberAssignment_1");
			builder.put(grammarAccess.getTimeAccess().getTimeAssignment(), "rule__Time__TimeAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private IoTGrammarAccess grammarAccess;

	@Override
	protected InternalIoTParser createParser() {
		InternalIoTParser result = new InternalIoTParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IoTGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IoTGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
