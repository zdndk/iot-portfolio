/*
 * generated by Xtext 2.16.0
 */
grammar InternalIoT;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.sdu.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.sdu.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.sdu.services.IoTGrammarAccess;

}

@parser::members {

 	private IoTGrammarAccess grammarAccess;

    public InternalIoTParser(TokenStream input, IoTGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "System";
   	}

   	@Override
   	protected IoTGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	iv_ruleSystem=ruleSystem
	{ $current=$iv_ruleSystem.current; }
	EOF;

// Rule System
ruleSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemSensorTypesParserRuleCall_0_0());
				}
				lv_system_0_1=ruleSensorTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_1,
						"org.xtext.sdu.IoT.SensorTypes");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemSensorParserRuleCall_0_1());
				}
				lv_system_0_2=ruleSensor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_2,
						"org.xtext.sdu.IoT.Sensor");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemSensorGroupParserRuleCall_0_2());
				}
				lv_system_0_3=ruleSensorGroup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_3,
						"org.xtext.sdu.IoT.SensorGroup");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemSensorGetMethodParserRuleCall_0_3());
				}
				lv_system_0_4=ruleSensorGetMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_4,
						"org.xtext.sdu.IoT.SensorGetMethod");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemDeviceTypesParserRuleCall_0_4());
				}
				lv_system_0_5=ruleDeviceTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_5,
						"org.xtext.sdu.IoT.DeviceTypes");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemDeviceParserRuleCall_0_5());
				}
				lv_system_0_6=ruleDevice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_6,
						"org.xtext.sdu.IoT.Device");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemServerTypesParserRuleCall_0_6());
				}
				lv_system_0_7=ruleServerTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_7,
						"org.xtext.sdu.IoT.ServerTypes");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemServerParserRuleCall_0_7());
				}
				lv_system_0_8=ruleServer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_8,
						"org.xtext.sdu.IoT.Server");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemDestinationTypesParserRuleCall_0_8());
				}
				lv_system_0_9=ruleDestinationTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_9,
						"org.xtext.sdu.IoT.DestinationTypes");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemDestinationParserRuleCall_0_9());
				}
				lv_system_0_10=ruleDestination
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_10,
						"org.xtext.sdu.IoT.Destination");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSystemAccess().getSystemFetchDataParserRuleCall_0_10());
				}
				lv_system_0_11=ruleFetchData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"system",
						lv_system_0_11,
						"org.xtext.sdu.IoT.FetchData");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)+
;

// Entry rule entryRuleSensorType
entryRuleSensorType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorTypeRule()); }
	iv_ruleSensorType=ruleSensorType
	{ $current=$iv_ruleSensorType.current; }
	EOF;

// Rule SensorType
ruleSensorType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSensorTypeAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSensorTypeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleSensorTypes
entryRuleSensorTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorTypesRule()); }
	iv_ruleSensorTypes=ruleSensorTypes
	{ $current=$iv_ruleSensorTypes.current; }
	EOF;

// Rule SensorTypes
ruleSensorTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SensorTypes'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorTypesAccess().getSensorTypesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorTypesAccess().getTypesSensorTypeParserRuleCall_1_0());
				}
				lv_types_1_0=ruleSensorType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorTypesRule());
					}
					add(
						$current,
						"types",
						lv_types_1_0,
						"org.xtext.sdu.IoT.SensorType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSensorTypesAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorTypesAccess().getTypesSensorTypeParserRuleCall_2_1_0());
					}
					lv_types_3_0=ruleSensorType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorTypesRule());
						}
						add(
							$current,
							"types",
							lv_types_3_0,
							"org.xtext.sdu.IoT.SensorType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_ruleSensor=ruleSensor
	{ $current=$iv_ruleSensor.current; }
	EOF;

// Rule Sensor
ruleSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Sensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorAccess().getSensorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getSensorAccess().getOfKeyword_2());
		}
		otherlv_3='type'
		{
			newLeafNode(otherlv_3, grammarAccess.getSensorAccess().getTypeKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getSensorAccess().getTypeSensorTypeCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleSensorGroup
entryRuleSensorGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorGroupRule()); }
	iv_ruleSensorGroup=ruleSensorGroup
	{ $current=$iv_ruleSensorGroup.current; }
	EOF;

// Rule SensorGroup
ruleSensorGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SensorGroup'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorGroupAccess().getSensorGroupKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSensorGroupAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorGroupRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='include'
		{
			newLeafNode(otherlv_2, grammarAccess.getSensorGroupAccess().getIncludeKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorGroupRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getSensorGroupAccess().getSensorsSensorCrossReference_3_0());
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getSensorGroupAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSensorGroupRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getSensorGroupAccess().getSensorsSensorCrossReference_4_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSensorGetMethod
entryRuleSensorGetMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorGetMethodRule()); }
	iv_ruleSensorGetMethod=ruleSensorGetMethod
	{ $current=$iv_ruleSensorGetMethod.current; }
	EOF;

// Rule SensorGetMethod
ruleSensorGetMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SensorGetMethod'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorGetMethodAccess().getSensorGetMethodKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorGetMethodAccess().getMethodMethodParserRuleCall_1_0());
				}
				lv_method_1_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorGetMethodRule());
					}
					set(
						$current,
						"method",
						lv_method_1_0,
						"org.xtext.sdu.IoT.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='for'
		{
			newLeafNode(otherlv_2, grammarAccess.getSensorGetMethodAccess().getForKeyword_2());
		}
		otherlv_3='type'
		{
			newLeafNode(otherlv_3, grammarAccess.getSensorGetMethodAccess().getTypeKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorGetMethodRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getSensorGetMethodAccess().getTypeSensorTypeCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					lv_parameters_2_0=RULE_ID
					{
						newLeafNode(lv_parameters_2_0, grammarAccess.getMethodAccess().getParametersIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodRule());
						}
						addWithLastConsumed(
							$current,
							"parameters",
							lv_parameters_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						lv_parameters_4_0=RULE_ID
						{
							newLeafNode(lv_parameters_4_0, grammarAccess.getMethodAccess().getParametersIDTerminalRuleCall_2_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMethodRule());
							}
							addWithLastConsumed(
								$current,
								"parameters",
								lv_parameters_4_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleDeviceType
entryRuleDeviceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeviceTypeRule()); }
	iv_ruleDeviceType=ruleDeviceType
	{ $current=$iv_ruleDeviceType.current; }
	EOF;

// Rule DeviceType
ruleDeviceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getDeviceTypeAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDeviceTypeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleDeviceTypes
entryRuleDeviceTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeviceTypesRule()); }
	iv_ruleDeviceTypes=ruleDeviceTypes
	{ $current=$iv_ruleDeviceTypes.current; }
	EOF;

// Rule DeviceTypes
ruleDeviceTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DeviceTypes'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeviceTypesAccess().getDeviceTypesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeviceTypesAccess().getTypesDeviceTypeParserRuleCall_1_0());
				}
				lv_types_1_0=ruleDeviceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeviceTypesRule());
					}
					add(
						$current,
						"types",
						lv_types_1_0,
						"org.xtext.sdu.IoT.DeviceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getDeviceTypesAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeviceTypesAccess().getTypesDeviceTypeParserRuleCall_2_1_0());
					}
					lv_types_3_0=ruleDeviceType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeviceTypesRule());
						}
						add(
							$current,
							"types",
							lv_types_3_0,
							"org.xtext.sdu.IoT.DeviceType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDevice
entryRuleDevice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeviceRule()); }
	iv_ruleDevice=ruleDevice
	{ $current=$iv_ruleDevice.current; }
	EOF;

// Rule Device
ruleDevice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Device'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeviceAccess().getDeviceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDeviceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeviceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getDeviceAccess().getOfKeyword_2());
		}
		otherlv_3='type'
		{
			newLeafNode(otherlv_3, grammarAccess.getDeviceAccess().getTypeKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeviceRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getDeviceAccess().getTypeDeviceTypeCrossReference_4_0());
				}
			)
		)
		otherlv_5='contains'
		{
			newLeafNode(otherlv_5, grammarAccess.getDeviceAccess().getContainsKeyword_5());
		}
		(
			(
				otherlv_6='device'
				{
					newLeafNode(otherlv_6, grammarAccess.getDeviceAccess().getDeviceKeyword_6_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDeviceRule());
							}
						}
						otherlv_7=RULE_ID
						{
							newLeafNode(otherlv_7, grammarAccess.getDeviceAccess().getDevicesDeviceCrossReference_6_0_1_0());
						}
					)
				)
			)
			    |
			(
				otherlv_8='group'
				{
					newLeafNode(otherlv_8, grammarAccess.getDeviceAccess().getGroupKeyword_6_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDeviceRule());
							}
						}
						otherlv_9=RULE_ID
						{
							newLeafNode(otherlv_9, grammarAccess.getDeviceAccess().getDevicesSensorGroupCrossReference_6_1_1_0());
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleServerType
entryRuleServerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServerTypeRule()); }
	iv_ruleServerType=ruleServerType
	{ $current=$iv_ruleServerType.current; }
	EOF;

// Rule ServerType
ruleServerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getServerTypeAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getServerTypeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleServerTypes
entryRuleServerTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServerTypesRule()); }
	iv_ruleServerTypes=ruleServerTypes
	{ $current=$iv_ruleServerTypes.current; }
	EOF;

// Rule ServerTypes
ruleServerTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ServerTypes'
		{
			newLeafNode(otherlv_0, grammarAccess.getServerTypesAccess().getServerTypesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServerTypesAccess().getTypesServerTypeParserRuleCall_1_0());
				}
				lv_types_1_0=ruleServerType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServerTypesRule());
					}
					add(
						$current,
						"types",
						lv_types_1_0,
						"org.xtext.sdu.IoT.ServerType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getServerTypesAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServerTypesAccess().getTypesServerTypeParserRuleCall_2_1_0());
					}
					lv_types_3_0=ruleServerType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServerTypesRule());
						}
						add(
							$current,
							"types",
							lv_types_3_0,
							"org.xtext.sdu.IoT.ServerType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleServer
entryRuleServer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServerRule()); }
	iv_ruleServer=ruleServer
	{ $current=$iv_ruleServer.current; }
	EOF;

// Rule Server
ruleServer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Server'
		{
			newLeafNode(otherlv_0, grammarAccess.getServerAccess().getServerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getServerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getServerAccess().getOfKeyword_2());
		}
		otherlv_3='type'
		{
			newLeafNode(otherlv_3, grammarAccess.getServerAccess().getTypeKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServerRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getServerAccess().getTypeServerTypeCrossReference_4_0());
				}
			)
		)
		otherlv_5='listens'
		{
			newLeafNode(otherlv_5, grammarAccess.getServerAccess().getListensKeyword_5());
		}
		otherlv_6='on'
		{
			newLeafNode(otherlv_6, grammarAccess.getServerAccess().getOnKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServerAccess().getIpIpParserRuleCall_7_0());
				}
				lv_ip_7_0=ruleIp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServerRule());
					}
					set(
						$current,
						"ip",
						lv_ip_7_0,
						"org.xtext.sdu.IoT.Ip");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='and'
		{
			newLeafNode(otherlv_8, grammarAccess.getServerAccess().getAndKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServerAccess().getPortPortnumberParserRuleCall_9_0());
				}
				lv_port_9_0=rulePortnumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServerRule());
					}
					set(
						$current,
						"port",
						lv_port_9_0,
						"org.xtext.sdu.IoT.Portnumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDestinationType
entryRuleDestinationType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDestinationTypeRule()); }
	iv_ruleDestinationType=ruleDestinationType
	{ $current=$iv_ruleDestinationType.current; }
	EOF;

// Rule DestinationType
ruleDestinationType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getDestinationTypeAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDestinationTypeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleDestinationTypes
entryRuleDestinationTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDestinationTypesRule()); }
	iv_ruleDestinationTypes=ruleDestinationTypes
	{ $current=$iv_ruleDestinationTypes.current; }
	EOF;

// Rule DestinationTypes
ruleDestinationTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DestinationTypes'
		{
			newLeafNode(otherlv_0, grammarAccess.getDestinationTypesAccess().getDestinationTypesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDestinationTypesAccess().getTypesDestinationTypeParserRuleCall_1_0());
				}
				lv_types_1_0=ruleDestinationType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDestinationTypesRule());
					}
					add(
						$current,
						"types",
						lv_types_1_0,
						"org.xtext.sdu.IoT.DestinationType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getDestinationTypesAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDestinationTypesAccess().getTypesDestinationTypeParserRuleCall_2_1_0());
					}
					lv_types_3_0=ruleDestinationType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDestinationTypesRule());
						}
						add(
							$current,
							"types",
							lv_types_3_0,
							"org.xtext.sdu.IoT.DestinationType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDestination
entryRuleDestination returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDestinationRule()); }
	iv_ruleDestination=ruleDestination
	{ $current=$iv_ruleDestination.current; }
	EOF;

// Rule Destination
ruleDestination returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Destination'
		{
			newLeafNode(otherlv_0, grammarAccess.getDestinationAccess().getDestinationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDestinationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDestinationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getDestinationAccess().getOfKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDestinationRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDestinationAccess().getTypeDestinationTypeCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleFetchData
entryRuleFetchData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFetchDataRule()); }
	iv_ruleFetchData=ruleFetchData
	{ $current=$iv_ruleFetchData.current; }
	EOF;

// Rule FetchData
ruleFetchData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Fetch'
		{
			newLeafNode(otherlv_0, grammarAccess.getFetchDataAccess().getFetchKeyword_0());
		}
		otherlv_1='data'
		{
			newLeafNode(otherlv_1, grammarAccess.getFetchDataAccess().getDataKeyword_1());
		}
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getFetchDataAccess().getFromKeyword_2());
		}
		(
			(
				otherlv_3='type'
				{
					newLeafNode(otherlv_3, grammarAccess.getFetchDataAccess().getTypeKeyword_3_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFetchDataRule());
							}
						}
						otherlv_4=RULE_ID
						{
							newLeafNode(otherlv_4, grammarAccess.getFetchDataAccess().getFilterSensorTypeCrossReference_3_0_1_0());
						}
					)
				)
			)
			    |
			(
				otherlv_5='group'
				{
					newLeafNode(otherlv_5, grammarAccess.getFetchDataAccess().getGroupKeyword_3_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFetchDataRule());
							}
						}
						otherlv_6=RULE_ID
						{
							newLeafNode(otherlv_6, grammarAccess.getFetchDataAccess().getFilterSensorGroupCrossReference_3_1_1_0());
						}
					)
				)
			)
		)
		otherlv_7='for'
		{
			newLeafNode(otherlv_7, grammarAccess.getFetchDataAccess().getForKeyword_4());
		}
		otherlv_8='device'
		{
			newLeafNode(otherlv_8, grammarAccess.getFetchDataAccess().getDeviceKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFetchDataRule());
					}
				}
				otherlv_9=RULE_ID
				{
					newLeafNode(otherlv_9, grammarAccess.getFetchDataAccess().getDeviceDeviceCrossReference_6_0());
				}
			)
		)
		otherlv_10='to'
		{
			newLeafNode(otherlv_10, grammarAccess.getFetchDataAccess().getToKeyword_7());
		}
		(
			(
				otherlv_11='destination'
				{
					newLeafNode(otherlv_11, grammarAccess.getFetchDataAccess().getDestinationKeyword_8_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFetchDataRule());
							}
						}
						otherlv_12=RULE_ID
						{
							newLeafNode(otherlv_12, grammarAccess.getFetchDataAccess().getDestinationDestinationCrossReference_8_0_1_0());
						}
					)
				)
			)
			    |
			(
				otherlv_13='server'
				{
					newLeafNode(otherlv_13, grammarAccess.getFetchDataAccess().getServerKeyword_8_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFetchDataRule());
							}
						}
						otherlv_14=RULE_ID
						{
							newLeafNode(otherlv_14, grammarAccess.getFetchDataAccess().getDestinationServerCrossReference_8_1_1_0());
						}
					)
				)
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFetchDataAccess().getConExpFetchDataExpressionParserRuleCall_9_0_0());
					}
					lv_conExp_15_0=ruleFetchDataExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFetchDataRule());
						}
						set(
							$current,
							"conExp",
							lv_conExp_15_0,
							"org.xtext.sdu.IoT.FetchDataExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFetchDataAccess().getConExpFetchDataConditionParserRuleCall_9_1_0());
					}
					lv_conExp_16_0=ruleFetchDataCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFetchDataRule());
						}
						set(
							$current,
							"conExp",
							lv_conExp_16_0,
							"org.xtext.sdu.IoT.FetchDataCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFetchDataExpression
entryRuleFetchDataExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFetchDataExpressionRule()); }
	iv_ruleFetchDataExpression=ruleFetchDataExpression
	{ $current=$iv_ruleFetchDataExpression.current; }
	EOF;

// Rule FetchDataExpression
ruleFetchDataExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='every'
		{
			newLeafNode(otherlv_0, grammarAccess.getFetchDataExpressionAccess().getEveryKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFetchDataExpressionAccess().getDurationTimeParserRuleCall_1_0());
				}
				lv_duration_1_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFetchDataExpressionRule());
					}
					set(
						$current,
						"duration",
						lv_duration_1_0,
						"org.xtext.sdu.IoT.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFetchDataExpressionAccess().getTimeUnitTimeUnitParserRuleCall_2_0());
				}
				lv_timeUnit_2_0=ruleTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFetchDataExpressionRule());
					}
					set(
						$current,
						"timeUnit",
						lv_timeUnit_2_0,
						"org.xtext.sdu.IoT.TimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFetchDataCondition
entryRuleFetchDataCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFetchDataConditionRule()); }
	iv_ruleFetchDataCondition=ruleFetchDataCondition
	{ $current=$iv_ruleFetchDataCondition.current; }
	EOF;

// Rule FetchDataCondition
ruleFetchDataCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='when'
			{
				newLeafNode(otherlv_0, grammarAccess.getFetchDataConditionAccess().getWhenKeyword_0_0());
			}
			    |
			otherlv_1='if'
			{
				newLeafNode(otherlv_1, grammarAccess.getFetchDataConditionAccess().getIfKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFetchDataConditionAccess().getConditionConditionParserRuleCall_1_0());
				}
				lv_condition_2_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFetchDataConditionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.xtext.sdu.IoT.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTimeUnit
entryRuleTimeUnit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTimeUnitRule()); }
	iv_ruleTimeUnit=ruleTimeUnit
	{ $current=$iv_ruleTimeUnit.current.getText(); }
	EOF;

// Rule TimeUnit
ruleTimeUnit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='ms'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitAccess().getMsKeyword_0());
		}
		    |
		kw='s'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitAccess().getSKeyword_1());
		}
		    |
		kw='m'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitAccess().getMKeyword_2());
		}
		    |
		kw='h'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitAccess().getHKeyword_3());
		}
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current.getText(); }
	EOF;

// Rule Condition
ruleCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='_??'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getConditionAccess().get_Keyword());
	}
;

// Entry rule entryRuleIp
entryRuleIp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIpRule()); }
	iv_ruleIp=ruleIp
	{ $current=$iv_ruleIp.current; }
	EOF;

// Rule Ip
ruleIp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIpAccess().getIpAction_0(),
					$current);
			}
		)
		(
			(
				lv_ip_1_0=RULE_INT
				{
					newLeafNode(lv_ip_1_0, grammarAccess.getIpAccess().getIpINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIpRule());
					}
					addWithLastConsumed(
						$current,
						"ip",
						lv_ip_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getIpAccess().getFullStopKeyword_2());
		}
		(
			(
				lv_ip_3_0=RULE_INT
				{
					newLeafNode(lv_ip_3_0, grammarAccess.getIpAccess().getIpINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIpRule());
					}
					addWithLastConsumed(
						$current,
						"ip",
						lv_ip_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='.'
		{
			newLeafNode(otherlv_4, grammarAccess.getIpAccess().getFullStopKeyword_4());
		}
		(
			(
				lv_ip_5_0=RULE_INT
				{
					newLeafNode(lv_ip_5_0, grammarAccess.getIpAccess().getIpINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIpRule());
					}
					addWithLastConsumed(
						$current,
						"ip",
						lv_ip_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getIpAccess().getFullStopKeyword_6());
		}
		(
			(
				lv_ip_7_0=RULE_INT
				{
					newLeafNode(lv_ip_7_0, grammarAccess.getIpAccess().getIpINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIpRule());
					}
					addWithLastConsumed(
						$current,
						"ip",
						lv_ip_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRulePortnumber
entryRulePortnumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortnumberRule()); }
	iv_rulePortnumber=rulePortnumber
	{ $current=$iv_rulePortnumber.current; }
	EOF;

// Rule Portnumber
rulePortnumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPortnumberAccess().getPortnumberAction_0(),
					$current);
			}
		)
		(
			(
				lv_number_1_0=RULE_INT
				{
					newLeafNode(lv_number_1_0, grammarAccess.getPortnumberAccess().getNumberINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPortnumberRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_time_0_0=RULE_INT
			{
				newLeafNode(lv_time_0_0, grammarAccess.getTimeAccess().getTimeINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTimeRule());
				}
				setWithLastConsumed(
					$current,
					"time",
					lv_time_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
