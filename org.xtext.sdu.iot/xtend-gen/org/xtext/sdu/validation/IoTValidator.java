/**
 * generated by Xtext 2.16.0
 */
package org.xtext.sdu.validation;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.xtext.sdu.ioT.IoTPackage;
import org.xtext.sdu.ioT.Ip;
import org.xtext.sdu.ioT.Portnumber;
import org.xtext.sdu.validation.AbstractIoTValidator;

/**
 * a
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class IoTValidator extends AbstractIoTValidator {
  /**
   * public static val INVALID_NAME = 'invalidName'
   * 
   * @Check
   * def checkGreetingStartsWithCapital(Greeting greeting) {
   * if (!Character.isUpperCase(greeting.name.charAt(0))) {
   * warning('Name should start with a capital',
   * IoTPackage.Literals.GREETING__NAME,
   * INVALID_NAME)
   * }
   * }
   */
  @Check
  public void portnumberWithinRange(final Portnumber portnumber) {
    if (((portnumber.getNumber() <= 1024) || (portnumber.getNumber() > 49151))) {
      this.warning("It is recommended that port number should be within 1025-49151, as ports outside this range is reserved", IoTPackage.Literals.PORTNUMBER__NUMBER, "unsafe or invalid port number");
    }
    if (((portnumber.getNumber() <= 0) || (portnumber.getNumber() > 65535))) {
      this.error("Invalid port number, has to be within 0 to 65535", IoTPackage.Literals.PORTNUMBER__NUMBER, "Port number outside of valid range");
    }
  }
  
  @Check
  public void ipWithinRange(final Ip ip) {
    EList<Integer> _ip = ip.getIp();
    for (final int num : _ip) {
      if (((num < 0) || (num > 255))) {
        this.error("All ip numbers must be in range 0-255", IoTPackage.Literals.IP__IP, "invalid ip number range(s)");
      }
    }
  }
}
