/*
 * generated by Xtext 2.16.0
 */
package org.xtext.sdu.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IoTGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.System");
		private final Assignment cSystemAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSystemAlternatives_0 = (Alternatives)cSystemAssignment.eContents().get(0);
		private final RuleCall cSystemSensorTypesParserRuleCall_0_0 = (RuleCall)cSystemAlternatives_0.eContents().get(0);
		private final RuleCall cSystemSensorParserRuleCall_0_1 = (RuleCall)cSystemAlternatives_0.eContents().get(1);
		private final RuleCall cSystemSensorGroupParserRuleCall_0_2 = (RuleCall)cSystemAlternatives_0.eContents().get(2);
		private final RuleCall cSystemSensorGetMethodParserRuleCall_0_3 = (RuleCall)cSystemAlternatives_0.eContents().get(3);
		private final RuleCall cSystemDeviceTypesParserRuleCall_0_4 = (RuleCall)cSystemAlternatives_0.eContents().get(4);
		private final RuleCall cSystemDeviceParserRuleCall_0_5 = (RuleCall)cSystemAlternatives_0.eContents().get(5);
		private final RuleCall cSystemServerTypesParserRuleCall_0_6 = (RuleCall)cSystemAlternatives_0.eContents().get(6);
		private final RuleCall cSystemServerParserRuleCall_0_7 = (RuleCall)cSystemAlternatives_0.eContents().get(7);
		private final RuleCall cSystemDestinationTypesParserRuleCall_0_8 = (RuleCall)cSystemAlternatives_0.eContents().get(8);
		private final RuleCall cSystemDestinationParserRuleCall_0_9 = (RuleCall)cSystemAlternatives_0.eContents().get(9);
		private final RuleCall cSystemFetchDataParserRuleCall_0_10 = (RuleCall)cSystemAlternatives_0.eContents().get(10);
		
		//System:
		//	system+=(SensorTypes | Sensor | SensorGroup | SensorGetMethod | DeviceTypes | Device | ServerTypes | Server |
		//	DestinationTypes | Destination | FetchData)+;
		@Override public ParserRule getRule() { return rule; }
		
		//system+=(SensorTypes | Sensor | SensorGroup | SensorGetMethod | DeviceTypes | Device | ServerTypes | Server |
		//DestinationTypes | Destination | FetchData)+
		public Assignment getSystemAssignment() { return cSystemAssignment; }
		
		//(SensorTypes | Sensor | SensorGroup | SensorGetMethod | DeviceTypes | Device | ServerTypes | Server | DestinationTypes |
		//Destination | FetchData)
		public Alternatives getSystemAlternatives_0() { return cSystemAlternatives_0; }
		
		//SensorTypes
		public RuleCall getSystemSensorTypesParserRuleCall_0_0() { return cSystemSensorTypesParserRuleCall_0_0; }
		
		//Sensor
		public RuleCall getSystemSensorParserRuleCall_0_1() { return cSystemSensorParserRuleCall_0_1; }
		
		//SensorGroup
		public RuleCall getSystemSensorGroupParserRuleCall_0_2() { return cSystemSensorGroupParserRuleCall_0_2; }
		
		//SensorGetMethod
		public RuleCall getSystemSensorGetMethodParserRuleCall_0_3() { return cSystemSensorGetMethodParserRuleCall_0_3; }
		
		//DeviceTypes
		public RuleCall getSystemDeviceTypesParserRuleCall_0_4() { return cSystemDeviceTypesParserRuleCall_0_4; }
		
		//Device
		public RuleCall getSystemDeviceParserRuleCall_0_5() { return cSystemDeviceParserRuleCall_0_5; }
		
		//ServerTypes
		public RuleCall getSystemServerTypesParserRuleCall_0_6() { return cSystemServerTypesParserRuleCall_0_6; }
		
		//Server
		public RuleCall getSystemServerParserRuleCall_0_7() { return cSystemServerParserRuleCall_0_7; }
		
		//DestinationTypes
		public RuleCall getSystemDestinationTypesParserRuleCall_0_8() { return cSystemDestinationTypesParserRuleCall_0_8; }
		
		//Destination
		public RuleCall getSystemDestinationParserRuleCall_0_9() { return cSystemDestinationParserRuleCall_0_9; }
		
		//FetchData
		public RuleCall getSystemFetchDataParserRuleCall_0_10() { return cSystemFetchDataParserRuleCall_0_10; }
	}
	public class SensorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.SensorType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SensorType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SensorTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.SensorTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorTypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesSensorTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesSensorTypeParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		
		//SensorTypes:
		//	'SensorTypes' types+=SensorType (',' types+=SensorType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'SensorTypes' types+=SensorType (',' types+=SensorType)*
		public Group getGroup() { return cGroup; }
		
		//'SensorTypes'
		public Keyword getSensorTypesKeyword_0() { return cSensorTypesKeyword_0; }
		
		//types+=SensorType
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//SensorType
		public RuleCall getTypesSensorTypeParserRuleCall_1_0() { return cTypesSensorTypeParserRuleCall_1_0; }
		
		//(',' types+=SensorType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//types+=SensorType
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//SensorType
		public RuleCall getTypesSensorTypeParserRuleCall_2_1_0() { return cTypesSensorTypeParserRuleCall_2_1_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeSensorTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeSensorTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeSensorTypeCrossReference_4_0.eContents().get(1);
		
		//Sensor:
		//	'Sensor' name=ID 'of' 'type' type=[SensorType];
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' name=ID 'of' 'type' type=[SensorType]
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[SensorType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[SensorType]
		public CrossReference getTypeSensorTypeCrossReference_4_0() { return cTypeSensorTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeSensorTypeIDTerminalRuleCall_4_0_1() { return cTypeSensorTypeIDTerminalRuleCall_4_0_1; }
	}
	public class SensorGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.SensorGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIncludeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSensorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSensorsSensorCrossReference_3_0 = (CrossReference)cSensorsAssignment_3.eContents().get(0);
		private final RuleCall cSensorsSensorIDTerminalRuleCall_3_0_1 = (RuleCall)cSensorsSensorCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSensorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSensorsSensorCrossReference_4_1_0 = (CrossReference)cSensorsAssignment_4_1.eContents().get(0);
		private final RuleCall cSensorsSensorIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSensorsSensorCrossReference_4_1_0.eContents().get(1);
		
		//SensorGroup:
		//	'SensorGroup' name=ID 'include' sensors+=[Sensor] (',' sensors+=[Sensor])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'SensorGroup' name=ID 'include' sensors+=[Sensor] (',' sensors+=[Sensor])*
		public Group getGroup() { return cGroup; }
		
		//'SensorGroup'
		public Keyword getSensorGroupKeyword_0() { return cSensorGroupKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'include'
		public Keyword getIncludeKeyword_2() { return cIncludeKeyword_2; }
		
		//sensors+=[Sensor]
		public Assignment getSensorsAssignment_3() { return cSensorsAssignment_3; }
		
		//[Sensor]
		public CrossReference getSensorsSensorCrossReference_3_0() { return cSensorsSensorCrossReference_3_0; }
		
		//ID
		public RuleCall getSensorsSensorIDTerminalRuleCall_3_0_1() { return cSensorsSensorIDTerminalRuleCall_3_0_1; }
		
		//(',' sensors+=[Sensor])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//sensors+=[Sensor]
		public Assignment getSensorsAssignment_4_1() { return cSensorsAssignment_4_1; }
		
		//[Sensor]
		public CrossReference getSensorsSensorCrossReference_4_1_0() { return cSensorsSensorCrossReference_4_1_0; }
		
		//ID
		public RuleCall getSensorsSensorIDTerminalRuleCall_4_1_0_1() { return cSensorsSensorIDTerminalRuleCall_4_1_0_1; }
	}
	public class SensorGetMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.SensorGetMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorGetMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_1_0 = (RuleCall)cMethodAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeSensorTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeSensorTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeSensorTypeCrossReference_4_0.eContents().get(1);
		
		//SensorGetMethod:
		//	'SensorGetMethod' method=Method 'for' 'type' type=[SensorType];
		@Override public ParserRule getRule() { return rule; }
		
		//'SensorGetMethod' method=Method 'for' 'type' type=[SensorType]
		public Group getGroup() { return cGroup; }
		
		//'SensorGetMethod'
		public Keyword getSensorGetMethodKeyword_0() { return cSensorGetMethodKeyword_0; }
		
		//method=Method
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//Method
		public RuleCall getMethodMethodParserRuleCall_1_0() { return cMethodMethodParserRuleCall_1_0; }
		
		//'for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[SensorType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[SensorType]
		public CrossReference getTypeSensorTypeCrossReference_4_0() { return cTypeSensorTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeSensorTypeIDTerminalRuleCall_4_0_1() { return cTypeSensorTypeIDTerminalRuleCall_4_0_1; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersIDTerminalRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Method:
		//	name=ID '(' (parameters+=ID (',' parameters+=ID)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' (parameters+=ID (',' parameters+=ID)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=ID (',' parameters+=ID)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=ID
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_2_0_0() { return cParametersIDTerminalRuleCall_2_0_0; }
		
		//(',' parameters+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=ID
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_2_1_1_0() { return cParametersIDTerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DeviceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.DeviceType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DeviceType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DeviceTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.DeviceTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceTypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesDeviceTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesDeviceTypeParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		
		//DeviceTypes:
		//	'DeviceTypes' types+=DeviceType (',' types+=DeviceType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'DeviceTypes' types+=DeviceType (',' types+=DeviceType)*
		public Group getGroup() { return cGroup; }
		
		//'DeviceTypes'
		public Keyword getDeviceTypesKeyword_0() { return cDeviceTypesKeyword_0; }
		
		//types+=DeviceType
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//DeviceType
		public RuleCall getTypesDeviceTypeParserRuleCall_1_0() { return cTypesDeviceTypeParserRuleCall_1_0; }
		
		//(',' types+=DeviceType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//types+=DeviceType
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//DeviceType
		public RuleCall getTypesDeviceTypeParserRuleCall_2_1_0() { return cTypesDeviceTypeParserRuleCall_2_1_0; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeDeviceTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeDeviceTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeDeviceTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cContainsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cDeviceKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cDevicesAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final CrossReference cDevicesDeviceCrossReference_6_0_1_0 = (CrossReference)cDevicesAssignment_6_0_1.eContents().get(0);
		private final RuleCall cDevicesDeviceIDTerminalRuleCall_6_0_1_0_1 = (RuleCall)cDevicesDeviceCrossReference_6_0_1_0.eContents().get(1);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cGroupKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cDevicesAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final CrossReference cDevicesSensorGroupCrossReference_6_1_1_0 = (CrossReference)cDevicesAssignment_6_1_1.eContents().get(0);
		private final RuleCall cDevicesSensorGroupIDTerminalRuleCall_6_1_1_0_1 = (RuleCall)cDevicesSensorGroupCrossReference_6_1_1_0.eContents().get(1);
		
		//Device:
		//	'Device' name=ID 'of' 'type' type=[DeviceType] 'contains' ('device' devices=[Device] | 'group'
		//	devices=[SensorGroup]);
		@Override public ParserRule getRule() { return rule; }
		
		//'Device' name=ID 'of' 'type' type=[DeviceType] 'contains' ('device' devices=[Device] | 'group' devices=[SensorGroup])
		public Group getGroup() { return cGroup; }
		
		//'Device'
		public Keyword getDeviceKeyword_0() { return cDeviceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[DeviceType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[DeviceType]
		public CrossReference getTypeDeviceTypeCrossReference_4_0() { return cTypeDeviceTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeDeviceTypeIDTerminalRuleCall_4_0_1() { return cTypeDeviceTypeIDTerminalRuleCall_4_0_1; }
		
		//'contains'
		public Keyword getContainsKeyword_5() { return cContainsKeyword_5; }
		
		//'device' devices=[Device] | 'group' devices=[SensorGroup]
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'device' devices=[Device]
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'device'
		public Keyword getDeviceKeyword_6_0_0() { return cDeviceKeyword_6_0_0; }
		
		//devices=[Device]
		public Assignment getDevicesAssignment_6_0_1() { return cDevicesAssignment_6_0_1; }
		
		//[Device]
		public CrossReference getDevicesDeviceCrossReference_6_0_1_0() { return cDevicesDeviceCrossReference_6_0_1_0; }
		
		//ID
		public RuleCall getDevicesDeviceIDTerminalRuleCall_6_0_1_0_1() { return cDevicesDeviceIDTerminalRuleCall_6_0_1_0_1; }
		
		//'group' devices=[SensorGroup]
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'group'
		public Keyword getGroupKeyword_6_1_0() { return cGroupKeyword_6_1_0; }
		
		//devices=[SensorGroup]
		public Assignment getDevicesAssignment_6_1_1() { return cDevicesAssignment_6_1_1; }
		
		//[SensorGroup]
		public CrossReference getDevicesSensorGroupCrossReference_6_1_1_0() { return cDevicesSensorGroupCrossReference_6_1_1_0; }
		
		//ID
		public RuleCall getDevicesSensorGroupIDTerminalRuleCall_6_1_1_0_1() { return cDevicesSensorGroupIDTerminalRuleCall_6_1_1_0_1; }
	}
	public class ServerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.ServerType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ServerType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ServerTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.ServerTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServerTypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesServerTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesServerTypeParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		
		//ServerTypes:
		//	'ServerTypes' types+=ServerType (',' types+=ServerType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'ServerTypes' types+=ServerType (',' types+=ServerType)*
		public Group getGroup() { return cGroup; }
		
		//'ServerTypes'
		public Keyword getServerTypesKeyword_0() { return cServerTypesKeyword_0; }
		
		//types+=ServerType
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//ServerType
		public RuleCall getTypesServerTypeParserRuleCall_1_0() { return cTypesServerTypeParserRuleCall_1_0; }
		
		//(',' types+=ServerType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//types+=ServerType
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//ServerType
		public RuleCall getTypesServerTypeParserRuleCall_2_1_0() { return cTypesServerTypeParserRuleCall_2_1_0; }
	}
	public class ServerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Server");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeServerTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeServerTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeServerTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cListensKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cOnKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIpAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIpIpParserRuleCall_7_0 = (RuleCall)cIpAssignment_7.eContents().get(0);
		private final Keyword cAndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPortAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPortPortnumberParserRuleCall_9_0 = (RuleCall)cPortAssignment_9.eContents().get(0);
		
		//Server:
		//	'Server' name=ID 'of' 'type' type=[ServerType] 'listens' 'on' ip=Ip 'and' port=Portnumber;
		@Override public ParserRule getRule() { return rule; }
		
		//'Server' name=ID 'of' 'type' type=[ServerType] 'listens' 'on' ip=Ip 'and' port=Portnumber
		public Group getGroup() { return cGroup; }
		
		//'Server'
		public Keyword getServerKeyword_0() { return cServerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[ServerType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[ServerType]
		public CrossReference getTypeServerTypeCrossReference_4_0() { return cTypeServerTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeServerTypeIDTerminalRuleCall_4_0_1() { return cTypeServerTypeIDTerminalRuleCall_4_0_1; }
		
		//'listens'
		public Keyword getListensKeyword_5() { return cListensKeyword_5; }
		
		//'on'
		public Keyword getOnKeyword_6() { return cOnKeyword_6; }
		
		//ip=Ip
		public Assignment getIpAssignment_7() { return cIpAssignment_7; }
		
		//Ip
		public RuleCall getIpIpParserRuleCall_7_0() { return cIpIpParserRuleCall_7_0; }
		
		//'and'
		public Keyword getAndKeyword_8() { return cAndKeyword_8; }
		
		//port=Portnumber
		public Assignment getPortAssignment_9() { return cPortAssignment_9; }
		
		//Portnumber
		public RuleCall getPortPortnumberParserRuleCall_9_0() { return cPortPortnumberParserRuleCall_9_0; }
	}
	public class DestinationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.DestinationType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DestinationType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DestinationTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.DestinationTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestinationTypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesDestinationTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesDestinationTypeParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		
		//DestinationTypes:
		//	'DestinationTypes' types+=DestinationType (',' types+=DestinationType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'DestinationTypes' types+=DestinationType (',' types+=DestinationType)*
		public Group getGroup() { return cGroup; }
		
		//'DestinationTypes'
		public Keyword getDestinationTypesKeyword_0() { return cDestinationTypesKeyword_0; }
		
		//types+=DestinationType
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//DestinationType
		public RuleCall getTypesDestinationTypeParserRuleCall_1_0() { return cTypesDestinationTypeParserRuleCall_1_0; }
		
		//(',' types+=DestinationType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//types+=DestinationType
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//DestinationType
		public RuleCall getTypesDestinationTypeParserRuleCall_2_1_0() { return cTypesDestinationTypeParserRuleCall_2_1_0; }
	}
	public class DestinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Destination");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestinationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDestinationTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDestinationTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeDestinationTypeCrossReference_3_0.eContents().get(1);
		
		//Destination:
		//	'Destination' name=ID 'of' type=[DestinationType];
		@Override public ParserRule getRule() { return rule; }
		
		//'Destination' name=ID 'of' type=[DestinationType]
		public Group getGroup() { return cGroup; }
		
		//'Destination'
		public Keyword getDestinationKeyword_0() { return cDestinationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//type=[DestinationType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DestinationType]
		public CrossReference getTypeDestinationTypeCrossReference_3_0() { return cTypeDestinationTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeDestinationTypeIDTerminalRuleCall_3_0_1() { return cTypeDestinationTypeIDTerminalRuleCall_3_0_1; }
	}
	public class FetchDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.FetchData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFetchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cTypeKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cFilterAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cFilterSensorTypeCrossReference_3_0_1_0 = (CrossReference)cFilterAssignment_3_0_1.eContents().get(0);
		private final RuleCall cFilterSensorTypeIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cFilterSensorTypeCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cGroupKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFilterAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cFilterSensorGroupCrossReference_3_1_1_0 = (CrossReference)cFilterAssignment_3_1_1.eContents().get(0);
		private final RuleCall cFilterSensorGroupIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cFilterSensorGroupCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDeviceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeviceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cDeviceDeviceCrossReference_6_0 = (CrossReference)cDeviceAssignment_6.eContents().get(0);
		private final RuleCall cDeviceDeviceIDTerminalRuleCall_6_0_1 = (RuleCall)cDeviceDeviceCrossReference_6_0.eContents().get(1);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cDestinationKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cDestinationAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final CrossReference cDestinationDestinationCrossReference_8_0_1_0 = (CrossReference)cDestinationAssignment_8_0_1.eContents().get(0);
		private final RuleCall cDestinationDestinationIDTerminalRuleCall_8_0_1_0_1 = (RuleCall)cDestinationDestinationCrossReference_8_0_1_0.eContents().get(1);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cServerKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cDestinationAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final CrossReference cDestinationServerCrossReference_8_1_1_0 = (CrossReference)cDestinationAssignment_8_1_1.eContents().get(0);
		private final RuleCall cDestinationServerIDTerminalRuleCall_8_1_1_0_1 = (RuleCall)cDestinationServerCrossReference_8_1_1_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cConditionKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cConditionAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cConditionFetchDataConditionParserRuleCall_9_1_0 = (RuleCall)cConditionAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cTriggeredKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cTriggeredAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cTriggeredFetchDataExpressionParserRuleCall_10_1_0 = (RuleCall)cTriggeredAssignment_10_1.eContents().get(0);
		
		//FetchData:
		//	'Fetch' 'data' 'from' ('type' filter=[SensorType] | 'group' filter=[SensorGroup]) 'for' 'device' device=[Device] 'to'
		//	('destination' destination=[Destination] | 'server' destination=[Server]) (=> 'condition'
		//	condition=FetchDataCondition)? (=> 'triggered' triggered=FetchDataExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fetch' 'data' 'from' ('type' filter=[SensorType] | 'group' filter=[SensorGroup]) 'for' 'device' device=[Device] 'to'
		//('destination' destination=[Destination] | 'server' destination=[Server]) (=> 'condition'
		//condition=FetchDataCondition)? (=> 'triggered' triggered=FetchDataExpression)?
		public Group getGroup() { return cGroup; }
		
		//'Fetch'
		public Keyword getFetchKeyword_0() { return cFetchKeyword_0; }
		
		//'data'
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//'type' filter=[SensorType] | 'group' filter=[SensorGroup]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'type' filter=[SensorType]
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'type'
		public Keyword getTypeKeyword_3_0_0() { return cTypeKeyword_3_0_0; }
		
		//filter=[SensorType]
		public Assignment getFilterAssignment_3_0_1() { return cFilterAssignment_3_0_1; }
		
		//[SensorType]
		public CrossReference getFilterSensorTypeCrossReference_3_0_1_0() { return cFilterSensorTypeCrossReference_3_0_1_0; }
		
		//ID
		public RuleCall getFilterSensorTypeIDTerminalRuleCall_3_0_1_0_1() { return cFilterSensorTypeIDTerminalRuleCall_3_0_1_0_1; }
		
		//'group' filter=[SensorGroup]
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'group'
		public Keyword getGroupKeyword_3_1_0() { return cGroupKeyword_3_1_0; }
		
		//filter=[SensorGroup]
		public Assignment getFilterAssignment_3_1_1() { return cFilterAssignment_3_1_1; }
		
		//[SensorGroup]
		public CrossReference getFilterSensorGroupCrossReference_3_1_1_0() { return cFilterSensorGroupCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getFilterSensorGroupIDTerminalRuleCall_3_1_1_0_1() { return cFilterSensorGroupIDTerminalRuleCall_3_1_1_0_1; }
		
		//'for'
		public Keyword getForKeyword_4() { return cForKeyword_4; }
		
		//'device'
		public Keyword getDeviceKeyword_5() { return cDeviceKeyword_5; }
		
		//device=[Device]
		public Assignment getDeviceAssignment_6() { return cDeviceAssignment_6; }
		
		//[Device]
		public CrossReference getDeviceDeviceCrossReference_6_0() { return cDeviceDeviceCrossReference_6_0; }
		
		//ID
		public RuleCall getDeviceDeviceIDTerminalRuleCall_6_0_1() { return cDeviceDeviceIDTerminalRuleCall_6_0_1; }
		
		//'to'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//'destination' destination=[Destination] | 'server' destination=[Server]
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'destination' destination=[Destination]
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'destination'
		public Keyword getDestinationKeyword_8_0_0() { return cDestinationKeyword_8_0_0; }
		
		//destination=[Destination]
		public Assignment getDestinationAssignment_8_0_1() { return cDestinationAssignment_8_0_1; }
		
		//[Destination]
		public CrossReference getDestinationDestinationCrossReference_8_0_1_0() { return cDestinationDestinationCrossReference_8_0_1_0; }
		
		//ID
		public RuleCall getDestinationDestinationIDTerminalRuleCall_8_0_1_0_1() { return cDestinationDestinationIDTerminalRuleCall_8_0_1_0_1; }
		
		//'server' destination=[Server]
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'server'
		public Keyword getServerKeyword_8_1_0() { return cServerKeyword_8_1_0; }
		
		//destination=[Server]
		public Assignment getDestinationAssignment_8_1_1() { return cDestinationAssignment_8_1_1; }
		
		//[Server]
		public CrossReference getDestinationServerCrossReference_8_1_1_0() { return cDestinationServerCrossReference_8_1_1_0; }
		
		//ID
		public RuleCall getDestinationServerIDTerminalRuleCall_8_1_1_0_1() { return cDestinationServerIDTerminalRuleCall_8_1_1_0_1; }
		
		//(=> 'condition' condition=FetchDataCondition)?
		public Group getGroup_9() { return cGroup_9; }
		
		//=> 'condition'
		public Keyword getConditionKeyword_9_0() { return cConditionKeyword_9_0; }
		
		//condition=FetchDataCondition
		public Assignment getConditionAssignment_9_1() { return cConditionAssignment_9_1; }
		
		//FetchDataCondition
		public RuleCall getConditionFetchDataConditionParserRuleCall_9_1_0() { return cConditionFetchDataConditionParserRuleCall_9_1_0; }
		
		//(=> 'triggered' triggered=FetchDataExpression)?
		public Group getGroup_10() { return cGroup_10; }
		
		//=> 'triggered'
		public Keyword getTriggeredKeyword_10_0() { return cTriggeredKeyword_10_0; }
		
		//triggered=FetchDataExpression
		public Assignment getTriggeredAssignment_10_1() { return cTriggeredAssignment_10_1; }
		
		//FetchDataExpression
		public RuleCall getTriggeredFetchDataExpressionParserRuleCall_10_1_0() { return cTriggeredFetchDataExpressionParserRuleCall_10_1_0; }
	}
	public class FetchDataExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.FetchDataExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEveryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationTimeParserRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		private final Assignment cTimeUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_2_0 = (RuleCall)cTimeUnitAssignment_2.eContents().get(0);
		
		//FetchDataExpression:
		//	'every' duration=Time timeUnit=TimeUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//'every' duration=Time timeUnit=TimeUnit
		public Group getGroup() { return cGroup; }
		
		//'every'
		public Keyword getEveryKeyword_0() { return cEveryKeyword_0; }
		
		//duration=Time
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//Time
		public RuleCall getDurationTimeParserRuleCall_1_0() { return cDurationTimeParserRuleCall_1_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_2() { return cTimeUnitAssignment_2; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_2_0() { return cTimeUnitTimeUnitParserRuleCall_2_0; }
	}
	public class FetchDataConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.FetchDataCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElseFetchDataConditionParserRuleCall_2_1_0 = (RuleCall)cElseAssignment_2_1.eContents().get(0);
		
		//FetchDataCondition:
		//	'if' ('(' condition=Condition ')') (=> 'else' else=FetchDataCondition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' ('(' condition=Condition ')') (=> 'else' else=FetchDataCondition)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'(' condition=Condition ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_0() { return cConditionConditionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//(=> 'else' else=FetchDataCondition)?
		public Group getGroup_2() { return cGroup_2; }
		
		//=> 'else'
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }
		
		//else=FetchDataCondition
		public Assignment getElseAssignment_2_1() { return cElseAssignment_2_1; }
		
		//FetchDataCondition
		public RuleCall getElseFetchDataConditionParserRuleCall_2_1_0() { return cElseFetchDataConditionParserRuleCall_2_1_0; }
	}
	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//TimeUnit:
		//	'ms' | 's' | 'm' | 'h';
		@Override public ParserRule getRule() { return rule; }
		
		//'ms' | 's' | 'm' | 'h'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ms'
		public Keyword getMsKeyword_0() { return cMsKeyword_0; }
		
		//'s'
		public Keyword getSKeyword_1() { return cSKeyword_1; }
		
		//'m'
		public Keyword getMKeyword_2() { return cMKeyword_2; }
		
		//'h'
		public Keyword getHKeyword_3() { return cHKeyword_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Condition");
		private final RuleCall cOrConditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	OrCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//OrCondition
		public RuleCall getOrConditionParserRuleCall() { return cOrConditionParserRuleCall; }
	}
	public class OrConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.OrCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrConditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndConditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrCondition Condition:
		//	AndCondition ({OrCondition.left=current} "||" right=AndCondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndCondition ({OrCondition.left=current} "||" right=AndCondition)*
		public Group getGroup() { return cGroup; }
		
		//AndCondition
		public RuleCall getAndConditionParserRuleCall_0() { return cAndConditionParserRuleCall_0; }
		
		//({OrCondition.left=current} "||" right=AndCondition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrCondition.left=current}
		public Action getOrConditionLeftAction_1_0() { return cOrConditionLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=AndCondition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndCondition
		public RuleCall getRightAndConditionParserRuleCall_1_2_0() { return cRightAndConditionParserRuleCall_1_2_0; }
	}
	public class AndConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.AndCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndConditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonConditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndCondition Condition:
		//	ComparisonCondition ({AndCondition.left=current} "&&" right=ComparisonCondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonCondition ({AndCondition.left=current} "&&" right=ComparisonCondition)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonCondition
		public RuleCall getComparisonConditionParserRuleCall_0() { return cComparisonConditionParserRuleCall_0; }
		
		//({AndCondition.left=current} "&&" right=ComparisonCondition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndCondition.left=current}
		public Action getAndConditionLeftAction_1_0() { return cAndConditionLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=ComparisonCondition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonCondition
		public RuleCall getRightComparisonConditionParserRuleCall_1_2_0() { return cRightComparisonConditionParserRuleCall_1_2_0; }
	}
	public class ComparisonConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.ComparisonCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonConditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryConditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonCondition Condition:
		//	PrimaryCondition ({ComparisonCondition.left=current} operator=("<" | "<=" | "==" | ">=" | ">")
		//	right=PrimaryCondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryCondition ({ComparisonCondition.left=current} operator=("<" | "<=" | "==" | ">=" | ">") right=PrimaryCondition)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryCondition
		public RuleCall getPrimaryConditionParserRuleCall_0() { return cPrimaryConditionParserRuleCall_0; }
		
		//({ComparisonCondition.left=current} operator=("<" | "<=" | "==" | ">=" | ">") right=PrimaryCondition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonCondition.left=current}
		public Action getComparisonConditionLeftAction_1_0() { return cComparisonConditionLeftAction_1_0; }
		
		//operator=("<" | "<=" | "==" | ">=" | ">")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("<" | "<=" | "==" | ">=" | ">")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"<"
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_1() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//"=="
		public Keyword getOperatorEqualsSignEqualsSignKeyword_1_1_0_2() { return cOperatorEqualsSignEqualsSignKeyword_1_1_0_2; }
		
		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//">"
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_4() { return cOperatorGreaterThanSignKeyword_1_1_0_4; }
		
		//right=PrimaryCondition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryCondition
		public RuleCall getRightPrimaryConditionParserRuleCall_1_2_0() { return cRightPrimaryConditionParserRuleCall_1_2_0; }
	}
	public class PrimaryConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.PrimaryCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cLiteralBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralMethodParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimaryCondition Condition:
		//	"(" Condition ")" | LiteralBoolean | LiteralInteger | LiteralMethod;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Condition ")" | LiteralBoolean | LiteralInteger | LiteralMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" Condition ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_0_1() { return cConditionParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//LiteralBoolean
		public RuleCall getLiteralBooleanParserRuleCall_1() { return cLiteralBooleanParserRuleCall_1; }
		
		//LiteralInteger
		public RuleCall getLiteralIntegerParserRuleCall_2() { return cLiteralIntegerParserRuleCall_2; }
		
		//LiteralMethod
		public RuleCall getLiteralMethodParserRuleCall_3() { return cLiteralMethodParserRuleCall_3; }
	}
	public class LiteralBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.LiteralBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralBoolAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cValueTrueKeyword_0_1_0 = (Keyword)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralBoolAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cValueFalseKeyword_1_1_0 = (Keyword)cValueAssignment_1_1.eContents().get(0);
		
		//LiteralBoolean Condition:
		//	{LiteralBool} value="true" | {LiteralBool} value="false";
		@Override public ParserRule getRule() { return rule; }
		
		//{LiteralBool} value="true" | {LiteralBool} value="false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{LiteralBool} value="true"
		public Group getGroup_0() { return cGroup_0; }
		
		//{LiteralBool}
		public Action getLiteralBoolAction_0_0() { return cLiteralBoolAction_0_0; }
		
		//value="true"
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//"true"
		public Keyword getValueTrueKeyword_0_1_0() { return cValueTrueKeyword_0_1_0; }
		
		//{LiteralBool} value="false"
		public Group getGroup_1() { return cGroup_1; }
		
		//{LiteralBool}
		public Action getLiteralBoolAction_1_0() { return cLiteralBoolAction_1_0; }
		
		//value="false"
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//"false"
		public Keyword getValueFalseKeyword_1_1_0() { return cValueFalseKeyword_1_1_0; }
	}
	public class LiteralMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.LiteralMethod");
		private final RuleCall cMethodParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LiteralMethod Condition:
		//	Method;
		@Override public ParserRule getRule() { return rule; }
		
		//Method
		public RuleCall getMethodParserRuleCall() { return cMethodParserRuleCall; }
	}
	public class LiteralIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.LiteralInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LiteralInteger Condition:
		//	{LiteralNumber} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{LiteralNumber} value=INT
		public Group getGroup() { return cGroup; }
		
		//{LiteralNumber}
		public Action getLiteralNumberAction_0() { return cLiteralNumberAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class IpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Ip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIpINTTerminalRuleCall_1_0 = (RuleCall)cIpAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIpINTTerminalRuleCall_3_0 = (RuleCall)cIpAssignment_3.eContents().get(0);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIpINTTerminalRuleCall_5_0 = (RuleCall)cIpAssignment_5.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIpAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIpINTTerminalRuleCall_7_0 = (RuleCall)cIpAssignment_7.eContents().get(0);
		
		//Ip:
		//	{Ip} ip+=INT '.' ip+=INT '.' ip+=INT '.' ip+=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Ip} ip+=INT '.' ip+=INT '.' ip+=INT '.' ip+=INT
		public Group getGroup() { return cGroup; }
		
		//{Ip}
		public Action getIpAction_0() { return cIpAction_0; }
		
		//ip+=INT
		public Assignment getIpAssignment_1() { return cIpAssignment_1; }
		
		//INT
		public RuleCall getIpINTTerminalRuleCall_1_0() { return cIpINTTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//ip+=INT
		public Assignment getIpAssignment_3() { return cIpAssignment_3; }
		
		//INT
		public RuleCall getIpINTTerminalRuleCall_3_0() { return cIpINTTerminalRuleCall_3_0; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//ip+=INT
		public Assignment getIpAssignment_5() { return cIpAssignment_5; }
		
		//INT
		public RuleCall getIpINTTerminalRuleCall_5_0() { return cIpINTTerminalRuleCall_5_0; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//ip+=INT
		public Assignment getIpAssignment_7() { return cIpAssignment_7; }
		
		//INT
		public RuleCall getIpINTTerminalRuleCall_7_0() { return cIpINTTerminalRuleCall_7_0; }
	}
	public class PortnumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Portnumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPortnumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//Portnumber:
		//	{Portnumber} number=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Portnumber} number=INT
		public Group getGroup() { return cGroup; }
		
		//{Portnumber}
		public Action getPortnumberAction_0() { return cPortnumberAction_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Time");
		private final Assignment cTimeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_0 = (RuleCall)cTimeAssignment.eContents().get(0);
		
		//Time:
		//	time=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//time=INT
		public Assignment getTimeAssignment() { return cTimeAssignment; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_0() { return cTimeINTTerminalRuleCall_0; }
	}
	
	
	private final SystemElements pSystem;
	private final SensorTypeElements pSensorType;
	private final SensorTypesElements pSensorTypes;
	private final SensorElements pSensor;
	private final SensorGroupElements pSensorGroup;
	private final SensorGetMethodElements pSensorGetMethod;
	private final MethodElements pMethod;
	private final DeviceTypeElements pDeviceType;
	private final DeviceTypesElements pDeviceTypes;
	private final DeviceElements pDevice;
	private final ServerTypeElements pServerType;
	private final ServerTypesElements pServerTypes;
	private final ServerElements pServer;
	private final DestinationTypeElements pDestinationType;
	private final DestinationTypesElements pDestinationTypes;
	private final DestinationElements pDestination;
	private final FetchDataElements pFetchData;
	private final FetchDataExpressionElements pFetchDataExpression;
	private final FetchDataConditionElements pFetchDataCondition;
	private final TimeUnitElements pTimeUnit;
	private final ConditionElements pCondition;
	private final OrConditionElements pOrCondition;
	private final AndConditionElements pAndCondition;
	private final ComparisonConditionElements pComparisonCondition;
	private final PrimaryConditionElements pPrimaryCondition;
	private final LiteralBooleanElements pLiteralBoolean;
	private final LiteralMethodElements pLiteralMethod;
	private final LiteralIntegerElements pLiteralInteger;
	private final IpElements pIp;
	private final PortnumberElements pPortnumber;
	private final TimeElements pTime;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IoTGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pSensorType = new SensorTypeElements();
		this.pSensorTypes = new SensorTypesElements();
		this.pSensor = new SensorElements();
		this.pSensorGroup = new SensorGroupElements();
		this.pSensorGetMethod = new SensorGetMethodElements();
		this.pMethod = new MethodElements();
		this.pDeviceType = new DeviceTypeElements();
		this.pDeviceTypes = new DeviceTypesElements();
		this.pDevice = new DeviceElements();
		this.pServerType = new ServerTypeElements();
		this.pServerTypes = new ServerTypesElements();
		this.pServer = new ServerElements();
		this.pDestinationType = new DestinationTypeElements();
		this.pDestinationTypes = new DestinationTypesElements();
		this.pDestination = new DestinationElements();
		this.pFetchData = new FetchDataElements();
		this.pFetchDataExpression = new FetchDataExpressionElements();
		this.pFetchDataCondition = new FetchDataConditionElements();
		this.pTimeUnit = new TimeUnitElements();
		this.pCondition = new ConditionElements();
		this.pOrCondition = new OrConditionElements();
		this.pAndCondition = new AndConditionElements();
		this.pComparisonCondition = new ComparisonConditionElements();
		this.pPrimaryCondition = new PrimaryConditionElements();
		this.pLiteralBoolean = new LiteralBooleanElements();
		this.pLiteralMethod = new LiteralMethodElements();
		this.pLiteralInteger = new LiteralIntegerElements();
		this.pIp = new IpElements();
		this.pPortnumber = new PortnumberElements();
		this.pTime = new TimeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.sdu.IoT".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//	system+=(SensorTypes | Sensor | SensorGroup | SensorGetMethod | DeviceTypes | Device | ServerTypes | Server |
	//	DestinationTypes | Destination | FetchData)+;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//SensorType:
	//	name=ID;
	public SensorTypeElements getSensorTypeAccess() {
		return pSensorType;
	}
	
	public ParserRule getSensorTypeRule() {
		return getSensorTypeAccess().getRule();
	}
	
	//SensorTypes:
	//	'SensorTypes' types+=SensorType (',' types+=SensorType)*;
	public SensorTypesElements getSensorTypesAccess() {
		return pSensorTypes;
	}
	
	public ParserRule getSensorTypesRule() {
		return getSensorTypesAccess().getRule();
	}
	
	//Sensor:
	//	'Sensor' name=ID 'of' 'type' type=[SensorType];
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//SensorGroup:
	//	'SensorGroup' name=ID 'include' sensors+=[Sensor] (',' sensors+=[Sensor])*;
	public SensorGroupElements getSensorGroupAccess() {
		return pSensorGroup;
	}
	
	public ParserRule getSensorGroupRule() {
		return getSensorGroupAccess().getRule();
	}
	
	//SensorGetMethod:
	//	'SensorGetMethod' method=Method 'for' 'type' type=[SensorType];
	public SensorGetMethodElements getSensorGetMethodAccess() {
		return pSensorGetMethod;
	}
	
	public ParserRule getSensorGetMethodRule() {
		return getSensorGetMethodAccess().getRule();
	}
	
	//Method:
	//	name=ID '(' (parameters+=ID (',' parameters+=ID)*)? ')';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//DeviceType:
	//	name=ID;
	public DeviceTypeElements getDeviceTypeAccess() {
		return pDeviceType;
	}
	
	public ParserRule getDeviceTypeRule() {
		return getDeviceTypeAccess().getRule();
	}
	
	//DeviceTypes:
	//	'DeviceTypes' types+=DeviceType (',' types+=DeviceType)*;
	public DeviceTypesElements getDeviceTypesAccess() {
		return pDeviceTypes;
	}
	
	public ParserRule getDeviceTypesRule() {
		return getDeviceTypesAccess().getRule();
	}
	
	//Device:
	//	'Device' name=ID 'of' 'type' type=[DeviceType] 'contains' ('device' devices=[Device] | 'group'
	//	devices=[SensorGroup]);
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//ServerType:
	//	name=ID;
	public ServerTypeElements getServerTypeAccess() {
		return pServerType;
	}
	
	public ParserRule getServerTypeRule() {
		return getServerTypeAccess().getRule();
	}
	
	//ServerTypes:
	//	'ServerTypes' types+=ServerType (',' types+=ServerType)*;
	public ServerTypesElements getServerTypesAccess() {
		return pServerTypes;
	}
	
	public ParserRule getServerTypesRule() {
		return getServerTypesAccess().getRule();
	}
	
	//Server:
	//	'Server' name=ID 'of' 'type' type=[ServerType] 'listens' 'on' ip=Ip 'and' port=Portnumber;
	public ServerElements getServerAccess() {
		return pServer;
	}
	
	public ParserRule getServerRule() {
		return getServerAccess().getRule();
	}
	
	//DestinationType:
	//	name=ID;
	public DestinationTypeElements getDestinationTypeAccess() {
		return pDestinationType;
	}
	
	public ParserRule getDestinationTypeRule() {
		return getDestinationTypeAccess().getRule();
	}
	
	//DestinationTypes:
	//	'DestinationTypes' types+=DestinationType (',' types+=DestinationType)*;
	public DestinationTypesElements getDestinationTypesAccess() {
		return pDestinationTypes;
	}
	
	public ParserRule getDestinationTypesRule() {
		return getDestinationTypesAccess().getRule();
	}
	
	//Destination:
	//	'Destination' name=ID 'of' type=[DestinationType];
	public DestinationElements getDestinationAccess() {
		return pDestination;
	}
	
	public ParserRule getDestinationRule() {
		return getDestinationAccess().getRule();
	}
	
	//FetchData:
	//	'Fetch' 'data' 'from' ('type' filter=[SensorType] | 'group' filter=[SensorGroup]) 'for' 'device' device=[Device] 'to'
	//	('destination' destination=[Destination] | 'server' destination=[Server]) (=> 'condition'
	//	condition=FetchDataCondition)? (=> 'triggered' triggered=FetchDataExpression)?;
	public FetchDataElements getFetchDataAccess() {
		return pFetchData;
	}
	
	public ParserRule getFetchDataRule() {
		return getFetchDataAccess().getRule();
	}
	
	//FetchDataExpression:
	//	'every' duration=Time timeUnit=TimeUnit;
	public FetchDataExpressionElements getFetchDataExpressionAccess() {
		return pFetchDataExpression;
	}
	
	public ParserRule getFetchDataExpressionRule() {
		return getFetchDataExpressionAccess().getRule();
	}
	
	//FetchDataCondition:
	//	'if' ('(' condition=Condition ')') (=> 'else' else=FetchDataCondition)?;
	public FetchDataConditionElements getFetchDataConditionAccess() {
		return pFetchDataCondition;
	}
	
	public ParserRule getFetchDataConditionRule() {
		return getFetchDataConditionAccess().getRule();
	}
	
	//TimeUnit:
	//	'ms' | 's' | 'm' | 'h';
	public TimeUnitElements getTimeUnitAccess() {
		return pTimeUnit;
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//Condition:
	//	OrCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//OrCondition Condition:
	//	AndCondition ({OrCondition.left=current} "||" right=AndCondition)*;
	public OrConditionElements getOrConditionAccess() {
		return pOrCondition;
	}
	
	public ParserRule getOrConditionRule() {
		return getOrConditionAccess().getRule();
	}
	
	//AndCondition Condition:
	//	ComparisonCondition ({AndCondition.left=current} "&&" right=ComparisonCondition)*;
	public AndConditionElements getAndConditionAccess() {
		return pAndCondition;
	}
	
	public ParserRule getAndConditionRule() {
		return getAndConditionAccess().getRule();
	}
	
	//ComparisonCondition Condition:
	//	PrimaryCondition ({ComparisonCondition.left=current} operator=("<" | "<=" | "==" | ">=" | ">")
	//	right=PrimaryCondition)*;
	public ComparisonConditionElements getComparisonConditionAccess() {
		return pComparisonCondition;
	}
	
	public ParserRule getComparisonConditionRule() {
		return getComparisonConditionAccess().getRule();
	}
	
	//PrimaryCondition Condition:
	//	"(" Condition ")" | LiteralBoolean | LiteralInteger | LiteralMethod;
	public PrimaryConditionElements getPrimaryConditionAccess() {
		return pPrimaryCondition;
	}
	
	public ParserRule getPrimaryConditionRule() {
		return getPrimaryConditionAccess().getRule();
	}
	
	//LiteralBoolean Condition:
	//	{LiteralBool} value="true" | {LiteralBool} value="false";
	public LiteralBooleanElements getLiteralBooleanAccess() {
		return pLiteralBoolean;
	}
	
	public ParserRule getLiteralBooleanRule() {
		return getLiteralBooleanAccess().getRule();
	}
	
	//LiteralMethod Condition:
	//	Method;
	public LiteralMethodElements getLiteralMethodAccess() {
		return pLiteralMethod;
	}
	
	public ParserRule getLiteralMethodRule() {
		return getLiteralMethodAccess().getRule();
	}
	
	//LiteralInteger Condition:
	//	{LiteralNumber} value=INT;
	public LiteralIntegerElements getLiteralIntegerAccess() {
		return pLiteralInteger;
	}
	
	public ParserRule getLiteralIntegerRule() {
		return getLiteralIntegerAccess().getRule();
	}
	
	//Ip:
	//	{Ip} ip+=INT '.' ip+=INT '.' ip+=INT '.' ip+=INT;
	public IpElements getIpAccess() {
		return pIp;
	}
	
	public ParserRule getIpRule() {
		return getIpAccess().getRule();
	}
	
	//Portnumber:
	//	{Portnumber} number=INT;
	public PortnumberElements getPortnumberAccess() {
		return pPortnumber;
	}
	
	public ParserRule getPortnumberRule() {
		return getPortnumberAccess().getRule();
	}
	
	//Time:
	//	time=INT;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
