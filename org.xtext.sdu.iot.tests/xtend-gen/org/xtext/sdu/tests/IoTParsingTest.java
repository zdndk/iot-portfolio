/**
 * generated by Xtext 2.17.0
 */
package org.xtext.sdu.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.sdu.generator.IoTGenerator;
import org.xtext.sdu.tests.IoTInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(IoTInjectorProvider.class)
@SuppressWarnings("all")
public class IoTParsingTest {
  @Inject
  private ParseHelper<org.xtext.sdu.ioT.System> parseHelper;
  
  protected String removeFirstComment(final InMemoryFileSystemAccess fsa) {
    String _xblockexpression = null;
    {
      final String f = fsa.getAllFiles().get((IFileSystemAccess.DEFAULT_OUTPUT + "system.py")).toString().trim();
      int _indexOf = f.indexOf("\n");
      int _plus = (_indexOf + 1);
      _xblockexpression = f.substring(_plus);
    }
    return _xblockexpression;
  }
  
  public CharSequence baseImports() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import pycom");
    _builder.newLine();
    _builder.append("import time");
    return _builder;
  }
  
  @Test
  public void testSensorTypes() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("SensorTypes Ae, Be");
      _builder.newLine();
      final org.xtext.sdu.ioT.System model = this.parseHelper.parse(_builder);
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final IoTGenerator IoTGenerator = new org.xtext.sdu.generator.IoTGenerator();
      IoTGenerator.doGenerate(model.eResource(), fsa, null);
      final String fileRead = this.removeFirstComment(fsa);
      StringConcatenation _builder_1 = new StringConcatenation();
      CharSequence _baseImports = this.baseImports();
      _builder_1.append(_baseImports);
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("import Ae from Ae");
      _builder_1.newLine();
      _builder_1.append("import Be from Be");
      Assertions.assertEquals(
        _builder_1.toString(), fileRead);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSensors() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("SensorTypes Ab");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Sensor Se of type Ab");
      _builder.newLine();
      final org.xtext.sdu.ioT.System model = this.parseHelper.parse(_builder);
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final IoTGenerator IoTGenerator = new org.xtext.sdu.generator.IoTGenerator();
      IoTGenerator.doGenerate(model.eResource(), fsa, null);
      final String fileRead = this.removeFirstComment(fsa);
      StringConcatenation _builder_1 = new StringConcatenation();
      CharSequence _baseImports = this.baseImports();
      _builder_1.append(_baseImports);
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("import Ab from Ab");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Se = Ab()");
      Assertions.assertEquals(
        _builder_1.toString(), fileRead);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSensorGroups() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("SensorTypes Ab");
      _builder.newLine();
      _builder.append("Sensor Se of type Ab");
      _builder.newLine();
      _builder.append("Sensor De of type Ab");
      _builder.newLine();
      _builder.append("SensorGroup Az include Se, De");
      _builder.newLine();
      final org.xtext.sdu.ioT.System model = this.parseHelper.parse(_builder);
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final IoTGenerator IoTGenerator = new org.xtext.sdu.generator.IoTGenerator();
      IoTGenerator.doGenerate(model.eResource(), fsa, null);
      final String fileRead = this.removeFirstComment(fsa);
      StringConcatenation _builder_1 = new StringConcatenation();
      CharSequence _baseImports = this.baseImports();
      _builder_1.append(_baseImports);
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("import Ab from Ab");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Se = Ab()");
      _builder_1.newLine();
      _builder_1.append("De = Ab()");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Az = [Se,De]");
      Assertions.assertEquals(
        _builder_1.toString(), fileRead);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testDeviceTypes() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("DeviceTypes Ae, Be");
      _builder.newLine();
      final org.xtext.sdu.ioT.System model = this.parseHelper.parse(_builder);
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final IoTGenerator IoTGenerator = new org.xtext.sdu.generator.IoTGenerator();
      IoTGenerator.doGenerate(model.eResource(), fsa, null);
      final String fileRead = this.removeFirstComment(fsa);
      StringConcatenation _builder_1 = new StringConcatenation();
      CharSequence _baseImports = this.baseImports();
      _builder_1.append(_baseImports);
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("import Ae from Ae");
      _builder_1.newLine();
      _builder_1.append("import Be from Be");
      Assertions.assertEquals(
        _builder_1.toString(), fileRead);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testDevices() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("DeviceTypes Ab");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Device Se of type Ab");
      _builder.newLine();
      final org.xtext.sdu.ioT.System model = this.parseHelper.parse(_builder);
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final IoTGenerator IoTGenerator = new org.xtext.sdu.generator.IoTGenerator();
      IoTGenerator.doGenerate(model.eResource(), fsa, null);
      final String fileRead = this.removeFirstComment(fsa);
      StringConcatenation _builder_1 = new StringConcatenation();
      CharSequence _baseImports = this.baseImports();
      _builder_1.append(_baseImports);
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("import Ab from Ab");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Se = Ab()");
      Assertions.assertEquals(
        _builder_1.toString(), fileRead);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSensorGetMethod() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("SensorTypes Ab");
      _builder.newLine();
      _builder.append("SensorGetMethod ab(ba,ca,da) for type Ab");
      _builder.newLine();
      final org.xtext.sdu.ioT.System model = this.parseHelper.parse(_builder);
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final IoTGenerator IoTGenerator = new org.xtext.sdu.generator.IoTGenerator();
      IoTGenerator.doGenerate(model.eResource(), fsa, null);
      final String fileRead = this.removeFirstComment(fsa);
      StringConcatenation _builder_1 = new StringConcatenation();
      CharSequence _baseImports = this.baseImports();
      _builder_1.append(_baseImports);
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("import Ab from Ab");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("getMethods = dict()");
      _builder_1.newLine();
      _builder_1.append("getMethods[Ab_ab(ba,ca,da)] = getattr(Ab,ab(ba,ca,da))");
      Assertions.assertEquals(
        _builder_1.toString(), fileRead);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
